package org.aksw.jena_sparql_api.example.proxy;

import java.io.Reader;
import java.io.StringReader;
import java.sql.Connection;
import java.sql.SQLException;

import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.RunScript;

public class CacheDataSource extends JdbcDataSource {

	public CacheDataSource() {
		// TODO Auto-generated constructor stub
        this.setURL("jdbc:h2:mem:test;DB_CLOSE_DELAY=-1");
        this.setUser("sa");
        this.setPassword("sa");
	}
	
	public void initialize() throws SQLException {
		String sql = ""
        		//+ "-- Empty - schema currently gets generated by hibernate"
        		+ "CREATE TABLE IF NOT EXISTS \"query_cache\"("
				+ "		\"id\" text PRIMARY KEY,"		// -- ID is usually an MD5 hash of the query string"
				+ "    	\"query_string\" text,"			// -- The query string is kept for reference"
				+ "    	\"data\" text,"					// -- The result set"
				+ "    	\"hit_count\" int NOT NULL,"	// -- Counter for how ofter the cache entry was hit"
				+ "    	\"time_of_insertion\" TIMESTAMP,"
				+ "    	\"time_of_expiration\" TIMESTAMP"
				+ ");"
				+ "CREATE INDEX IF NOT EXISTS \"idx_query_cache_time_of_expiration\" ON \"query_cache\"(\"time_of_expiration\");"
				+ "CREATE INDEX IF NOT EXISTS \"idx_query_cache_hit_count\" ON \"query_cache\"(\"hit_count\");";
        Reader reader = new StringReader(sql);
        
        Connection conn = this.getConnection();
        RunScript.execute(conn, reader);
        conn.close();
	}

//	@Override
//	public boolean isWrapperFor(Class<?> arg0) throws SQLException {
//		// TODO Auto-generated method stub
//		return false;
//	}
//
//	@Override
//	public <T> T unwrap(Class<T> arg0) throws SQLException {
//		// TODO Auto-generated method stub
//		return null;
//	}
}
